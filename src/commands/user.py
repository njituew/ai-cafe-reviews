import io
import asyncio
import json

from aiogram import types, F, Bot, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from src.ai_utils import get_tonality, speech_to_text
from src.logger import logger
from db.utils import *

with open("managers.json", "r") as f:
    managers_data = json.load(f)
    managers = [mgr["chat_id"] for mgr in managers_data["managers"]]


class ReviewForm(StatesGroup):
    user_name = State()
    rating = State()
    review = State()


user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø - MuffinMate. –í—ã—Å–ª—É—à–∏–≤–∞—é –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–æ—Ñ–µ–π–Ω–∏ MuffinMate."
    )
    await choose_action(message)


@user_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def process_add_review(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º", callback_data="anonymous")]
    ])
    await state.set_state(ReviewForm.user_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)


@user_router.message(ReviewForm.user_name)
@user_router.callback_query(F.data == "anonymous")
async def process_user_name(data: types.Message | types.CallbackQuery, state: FSMContext):
    if isinstance(data, types.Message):
        await state.update_data(user_name=data.text)
    else:
        await state.update_data(user_name="–ê–Ω–æ–Ω–∏–º")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
            InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
            InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
            InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
            InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
        ]
    ])
    
    await state.set_state(ReviewForm.rating)
    if isinstance(data, types.Message):
        await data.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=keyboard)
    else:
        await data.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=keyboard)
        await data.answer()


@user_router.callback_query(F.data.startswith("rating_"))
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(temp_rating=rating)

    stars = [
        InlineKeyboardButton(text="üåü 1", callback_data="rating_1") if rating >= 1 else InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
        InlineKeyboardButton(text="üåü 2", callback_data="rating_2") if rating >= 2 else InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
        InlineKeyboardButton(text="üåü 3", callback_data="rating_3") if rating >= 3 else InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
        InlineKeyboardButton(text="üåü 4", callback_data="rating_4") if rating >= 4 else InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
        InlineKeyboardButton(text="üåü 5", callback_data="rating_5") if rating >= 5 else InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        stars,
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="confirm_rating")]
    ])
    await callback.message.edit_text(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating} –∏–∑ 5", reply_markup=keyboard)
    await callback.answer()


@user_router.callback_query(F.data == "confirm_rating")
async def confirm_rating(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rating = data.get("temp_rating")
    
    await state.update_data(rating=rating)
    await state.set_state(ReviewForm.review)
    await callback.message.edit_text(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∏–∑ 5\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await callback.answer()


@user_router.message(ReviewForm.review)
async def process_review(message: types.Message, state: FSMContext, bot: Bot):
    review = None
    data = await state.get_data()
    data["user_id"] = message.from_user.id

    if message.text:
        review = message.text
    elif message.voice:
        voice_file = await bot.get_file(message.voice.file_id)
        file_path = voice_file.file_path
        
        buf = io.BytesIO()
        await bot.download_file(file_path, destination=buf)
        buf.name = "voice.oga"
        buf.seek(0)
        review = buf
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data['user_id']} –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤")
    asyncio.create_task(save_data(data, review, bot))
    await state.clear()


@user_router.message(F.text == "–ú–æ–∏ –æ—Ç–∑—ã–≤—ã")
async def view_reviews(message: types.Message):
    user_id = message.from_user.id
    user_reviews = await get_user_reviews(user_id)
    
    if not user_reviews:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    
    response = "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
    for i, review in enumerate(user_reviews, 1):
        response += f"–û—Ç–∑—ã–≤ ‚Ññ{i} –æ—Ç {review.created_at.strftime('%d.%m.%Y %H:%M')} | –û—Ü–µ–Ω–∫–∞: {review.rating} | {review.text}\n\n"
    
    await message.answer(response)


@user_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")
async def process_delete_review(message: types.Message):
    user_id = message.from_user.id
    user_reviews = await get_user_reviews(user_id)
    
    if not user_reviews:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Ññ{i}", callback_data=f"del_{r.id}")]
        for i, r in enumerate(user_reviews, 1)
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@user_router.callback_query(F.data.startswith("del_"))
async def confirm_delete(callback: types.CallbackQuery):
    review_id = int(callback.data.split("_")[1])
    review = await get_review(review_id)
    
    if not review:
        await callback.message.answer("–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    try:
        await delete_review(review)
        await callback.message.answer(f"–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª –æ—Ç–∑—ã–≤ {review_id}")
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")
    
    await callback.answer()


async def choose_action(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="–ú–æ–∏ –æ—Ç–∑—ã–≤—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def save_data(data: dict, review: io.BytesIO | str, bot: Bot):
    if isinstance(review, io.BytesIO):
        review_text = await speech_to_text(review)
    else:
        review_text = review
    
    review_tonality = await get_tonality(review_text)

    new_review = Review(
        user_id=data["user_id"],
        rating=data["rating"],
        text=review_text,
        tonality=review_tonality,
        readed=False,
        answered=False,
        readed_by=None
    )

    await add_review(new_review)

    if review_tonality in [ToneEnum.NEG, ToneEnum.VNEG]:
        await notify_managers_of_negative_review(new_review, data["user_name"], bot)


async def notify_managers_of_negative_review(review: Review, user_name: str, bot: Bot):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{review.id}")]
    ])
    message = (
        f"–ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {review.user_id}\n"
        f"–û—Ü–µ–Ω–∫–∞: {review.rating}\n"
        f"–¢–µ–∫—Å—Ç: {review.text}\n"
        f"–î–∞—Ç–∞: {review.created_at.strftime('%d.%m.%Y %H:%M')}"
    )
    for manager_id in managers:
        try:
            await bot.send_message(chat_id=manager_id, text=message, reply_markup=keyboard)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")


@user_router.message()
async def default_cmd(message: types.Message):
    await message.answer(message.text)


# –≤—ã–≤–æ–¥ –º–æ–∏ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
# —Ä–æ—É—Ç–µ—Ä
# –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "–æ –Ω–∞—Å"
