import io
import asyncio
import json

from aiogram import types, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from datetime import datetime

from src.ai_utils import get_tonality, speech_to_text
from db1test import reviews, get_user_reviews, delete_review_db, get_review # —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–¥ (–∞—Ä—Å, —Ä–∞–±–æ—Ç–∞–µ–º)
from src.logger import logger

with open("managers.json", "r") as f:
    managers_data = json.load(f)
    managers = [mgr["chat_id"] for mgr in managers_data["managers"]]

class ReviewForm(StatesGroup):
    user_name = State()
    rating = State()
    review = State()


async def default_cmd(message: types.Message):
    await message.answer(message.text)


async def cmd_start(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø - MuffinMate. –í—ã—Å–ª—É—à–∏–≤–∞—é –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–æ—Ñ–µ–π–Ω–∏ MuffinMate."
    )
    await choose_action(message)


async def choose_action(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="–ú–æ–∏ –æ—Ç–∑—ã–≤—ã")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def process_add_review(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º", callback_data="anonymous")]
    ])
    await state.set_state(ReviewForm.user_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)


async def process_user_name(data: types.Message | types.CallbackQuery, state: FSMContext):
    if isinstance(data, types.Message):
        await state.update_data(user_name=data.text)
    else:
        await state.update_data(user_name="–ê–Ω–æ–Ω–∏–º")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
            InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
            InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
            InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
            InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
        ]
    ])
    
    await state.set_state(ReviewForm.rating)

    if isinstance(data, types.Message):
        await data.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=keyboard)
    else:
        await data.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=keyboard)
        await data.answer()


async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(temp_rating=rating)

    stars = [
        InlineKeyboardButton(text="üåü 1", callback_data="rating_1") if rating >= 1 else InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
        InlineKeyboardButton(text="üåü 2", callback_data="rating_2") if rating >= 2 else InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
        InlineKeyboardButton(text="üåü 3", callback_data="rating_3") if rating >= 3 else InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
        InlineKeyboardButton(text="üåü 4", callback_data="rating_4") if rating >= 4 else InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
        InlineKeyboardButton(text="üåü 5", callback_data="rating_5") if rating >= 5 else InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        stars,
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="confirm_rating")]
    ])
    await callback.message.edit_text(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating} –∏–∑ 5", reply_markup=keyboard)
    await callback.answer()


async def confirm_rating(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rating = data.get("temp_rating")
    
    await state.update_data(rating=rating)
    await state.set_state(ReviewForm.review)
    await callback.message.edit_text(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∏–∑ 5\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await callback.answer()


async def process_review(message: types.Message, state: FSMContext, bot: Bot):
    review = None
    data = await state.get_data()
    data["user_id"] = message.from_user.id

    if message.text:
        review = message.text
    elif message.voice:
        voice_file = await bot.get_file(message.voice.file_id)
        file_path = voice_file.file_path
        
        buf = io.BytesIO()
        await bot.download_file(file_path, destination=buf)
        buf.name = "voice.oga"
        buf.seek(0)

        review = buf
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    asyncio.create_task(save_data(data, review, bot))
    await state.clear()


async def view_reviews(message: types.Message):
    user_id = message.from_user.id
    user_reviews = get_user_reviews(user_id)
    
    if not user_reviews:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    
    response = "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
    for i in range(len(user_reviews)):
        review = user_reviews[i]
        response += f"–û—Ç–∑—ã–≤ ‚Ññ{i + 1} –æ—Ç {review['date']} | –û—Ü–µ–Ω–∫–∞: {review['rating']} | {review['text']}\n\n"
    
    await message.answer(response)


async def delete_review(message: types.Message):
    user_id = message.from_user.id
    user_reviews = get_user_reviews(user_id)
    
    if not user_reviews:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Ññ{i + 1}", callback_data=f"del_{user_reviews[i]['review_id']}")]
        for i in range(len(user_reviews))
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


async def confirm_delete(callback: types.CallbackQuery):
    review_id = int(callback.data.split("_")[1])
    review = get_review(review_id)
    
    if not review:
        await callback.message.answer("–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    if delete_review_db(review_id):
        await callback.message.answer(f"–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")
    await callback.answer()


async def save_data(data: dict, review: io.BytesIO | str, bot: Bot):
    global reviews
    if isinstance(review, io.BytesIO):
        review_text = await speech_to_text(review)
    else:
        review_text = review
    
    review_tonality = await get_tonality(review_text)

    new_review = {
        "review_id": len(reviews) + 1,
        "user_id": data["user_id"],
        "rating": data["rating"],
        "text": review_text,
        "tonality": review_tonality,
        "readed": False,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    }

    reviews.append(new_review)

    if review_tonality in ["Negative", "Very Negative"]:
        message = (
            f"–ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_name']}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['user_id']}\n"
            f"–û—Ü–µ–Ω–∫–∞: {new_review['rating']}\n"
            f"–¢–µ–∫—Å—Ç: {review_text}\n"
            f"–î–∞—Ç–∞: {new_review['date']}"
        )
        for manager_id in managers:
            try:
                await bot.send_message(chat_id=manager_id, text=message)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")
    

def register_handlers(dp):
    dp.message.register(cmd_start, CommandStart())

    dp.message.register(process_add_review, F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    dp.message.register(process_user_name, ReviewForm.user_name)
    dp.callback_query.register(process_user_name, F.data == "anonymous")
    dp.callback_query.register(process_rating, F.data.startswith("rating_"))
    dp.callback_query.register(confirm_rating, F.data == "confirm_rating")
    dp.message.register(process_review, ReviewForm.review)

    dp.message.register(view_reviews,F.text == "–ú–æ–∏ –æ—Ç–∑—ã–≤—ã")

    dp.message.register(delete_review, F.text == "–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")
    dp.callback_query.register(confirm_delete, F.data.startswith("del_"))

    dp.message.register(default_cmd)