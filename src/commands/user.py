import io
import asyncio

from aiogram import types, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.voice_processing import speech_to_text
from src.review_processing import get_tonality

class ReviewForm(StatesGroup):
    user_name = State()
    rating = State()
    review = State()


async def default_cmd(message: types.Message):
    await message.answer(message.text)


async def cmd_start(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø - MuffinMate. –í—ã—Å–ª—É—à–∏–≤–∞—é –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–æ—Ñ–µ–π–Ω–∏ MuffinMate."
    )
    await choose_action(message)


async def choose_action(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_review")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="delete_review")],
        [InlineKeyboardButton(text="–ú–æ–∏ –æ—Ç–∑—ã–≤—ã", callback_data="view_reviews")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def process_add_review(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º", callback_data="anonymous")]
    ])
    await state.set_state(ReviewForm.user_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)
    await callback.answer()


async def process_user_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
            InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
            InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
            InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
            InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
        ]
    ])
    
    await state.set_state(ReviewForm.rating)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é (–≤—ã–±–µ—Ä–∏—Ç–µ –∑–≤—ë–∑–¥—ã):", reply_markup=keyboard)


async def process_anonymous(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(user_name="–ê–Ω–æ–Ω–∏–º")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
            InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
            InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
            InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
            InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
        ]
    ])
    
    await state.set_state(ReviewForm.rating)
    await callback.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é (–≤—ã–±–µ—Ä–∏—Ç–µ –∑–≤—ë–∑–¥—ã):", reply_markup=keyboard)
    await callback.answer()


async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(temp_rating=rating)

    stars = [
        InlineKeyboardButton(text="üåü 1", callback_data="rating_1") if rating >= 1 else InlineKeyboardButton(text="‚òÖ 1", callback_data="rating_1"),
        InlineKeyboardButton(text="üåü 2", callback_data="rating_2") if rating >= 2 else InlineKeyboardButton(text="‚òÖ 2", callback_data="rating_2"),
        InlineKeyboardButton(text="üåü 3", callback_data="rating_3") if rating >= 3 else InlineKeyboardButton(text="‚òÖ 3", callback_data="rating_3"),
        InlineKeyboardButton(text="üåü 4", callback_data="rating_4") if rating >= 4 else InlineKeyboardButton(text="‚òÖ 4", callback_data="rating_4"),
        InlineKeyboardButton(text="üåü 5", callback_data="rating_5") if rating >= 5 else InlineKeyboardButton(text="‚òÖ 5", callback_data="rating_5"),
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        stars,
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="confirm_rating")]
    ])
    await callback.message.edit_text(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating} –∏–∑ 5", reply_markup=keyboard)
    await callback.answer()


async def confirm_rating(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rating = data.get("temp_rating")
    
    await state.update_data(rating=rating)
    await state.set_state(ReviewForm.review)
    await callback.message.edit_text(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∏–∑ 5\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await callback.answer()


async def process_review(message: types.Message, state: FSMContext, bot: Bot):
    review = None
    data = await state.get_data()

    if message.text:
        review = message.text
    elif message.voice:
        voice_file = await bot.get_file(message.voice.file_id)
        file_path = voice_file.file_path
        
        buf = io.BytesIO()
        await bot.download_file(file_path, destination=buf)
        buf.name = "voice.oga"
        buf.seek(0)

        review = buf
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    asyncio.create_task(save_data(data, review))
    await state.clear()


async def save_data(data: dict, review: io.BytesIO | str):
    if isinstance(review, io.BytesIO):
        review_text = await speech_to_text(review)
    else:
        review_text = review
    
    review_tonality = await get_tonality(review_text)
    print(review_text, review_tonality)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    


def register_handlers(dp):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(process_add_review, F.data == "add_review")
    dp.message.register(process_user_name, ReviewForm.user_name)
    dp.callback_query.register(process_anonymous, F.data == "anonymous")
    dp.callback_query.register(process_rating, F.data.startswith("rating_"))
    dp.callback_query.register(confirm_rating, F.data == "confirm_rating")
    dp.message.register(process_review, ReviewForm.review)
    dp.message.register(default_cmd)