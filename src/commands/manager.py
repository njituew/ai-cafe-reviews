from aiogram import types, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from src.utils import is_manager

from src.logger import logger
import dbtest   # —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–¥ (–∞—Ä—Å, —Ä–∞–±–æ—Ç–∞–µ–º)


async def manager_panel(message: types.Message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = message.chat.id
    if not is_manager(user_id):
        await message.answer("–í—ã –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {user_id}")
        return

    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã üó£Ô∏è")],
            [KeyboardButton(text="–î–∞—à–±–æ—Ä–¥ üíª"), KeyboardButton(text="–î–∏–Ω–∞–º–∏–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ üìà")],
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üë©‚Äçüíº")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup=keyboard)


async def unread_reviews(message_or_callback: types.Message | types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ callback - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    Args:
        message_or_callback (types.Message | types.CallbackQuery): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å (ü©º)
    """
    user_id = message_or_callback.chat.id if isinstance(message_or_callback, types.Message) else message_or_callback.from_user.id
    if not is_manager(user_id):
        await message_or_callback.answer("–í—ã –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {user_id}")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if isinstance(message_or_callback, types.Message):
        page = 0
    else:
        page = int(message_or_callback.data.split("_")[3])

    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
    text, keyboard = get_reviews_page(page)
    if keyboard is None:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(text)
        else:
            await message_or_callback.message.edit_text(text)
    else:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            await message_or_callback.answer()  # ü©º


async def review(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –ø–æ –µ–≥–æ id

    Args:
        callback_query (types.CallbackQuery): –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    """
    review_id = int(callback_query.data.split("_")[1])
    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback_query.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ {review_id}")
    review = dbtest.get_review(review_id)
    await callback_query.message.answer(
        f"ID: {review['review_id']}"
        f"\n–û—Ç–∑—ã–≤: {review['text']}"
        f"\n–û—Ü–µ–Ω–∫–∞: {review['mark']}"
        f"\n–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {review['tonality']}"
        f"\n–ü—Ä–æ—á–∏—Ç–∞–Ω: {'–î–∞' if review['readed'] else '–ù–µ—Ç'}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úÖ", callback_data=f"readed_{review_id}")]]
        )
    )


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä—É—á–µ–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    Args:
        dp (Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    dp.message.register(manager_panel, Command("manager"))
    dp.message.register(unread_reviews, F.text == "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã üó£Ô∏è")
    dp.callback_query.register(unread_reviews, F.data.startswith("unread_reviews_page_"))
    dp.callback_query.register(review, F.data.startswith("review_"))


# ================================================ Utils here ================================================
def get_reviews_page(page: int, reviews_per_page: int = 5) -> tuple[str, InlineKeyboardMarkup]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏

    Args:
        page (int): –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–∞–≤–æ–≤
        reviews_per_page (int, optional): –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.

    Returns:
        tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∞–º–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """    
    unread_reviews = dbtest.get_unreaded_reviews()
    total_reviews = len(unread_reviews)
    start = page * reviews_per_page
    end = start + reviews_per_page
    reviews_to_display = unread_reviews[start:end]

    if not reviews_to_display:
        return "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.", None

    buttons = []
    
    # –æ—Ç–∑—ã–≤—ã
    for review in reviews_to_display:
        review_text = f"–û—Ü–µ–Ω–∫–∞: {review['mark']} - {review['text'][:10]}..."
        buttons.append([InlineKeyboardButton(text=review_text, callback_data=f"review_{review['review_id']}")])

    # –≤–∑–∞–¥-–≤–ø–µ—Ä—ë–¥
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"unread_reviews_page_{page - 1}"))
    if end < total_reviews:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"unread_reviews_page_{page + 1}"))
    if navigation_buttons:
        buttons.append(navigation_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
    return text, keyboard
