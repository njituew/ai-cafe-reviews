from aiogram import types, F, Router, BaseMiddleware, Bot
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, BotCommand
)

from db.utils import is_manager
from src.logger import logger
# from src.graph import *
import src.graph as graph
import db.utils as db
import src.ai_utils as ai

from datetime import datetime, timedelta


class ManagerForm(StatesGroup):
    waiting_for_manager_reply = State()
    waiting_for_custom_query = State()


class ManagerCheckMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user_id = event.chat.id if isinstance(event, types.Message) else event.from_user.id
        if not await is_manager(user_id):
            if isinstance(event, types.Message):
                await event.answer("–í—ã –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä")
            elif isinstance(event, types.CallbackQuery):
                await event.answer("–í—ã –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä", show_alert=True)
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {user_id}")
            return
        return await handler(event, data)


manager_router = Router()
manager_router.message.middleware(ManagerCheckMiddleware())
manager_router.callback_query.middleware(ManagerCheckMiddleware())


@manager_router.message(Command("manager"))
async def manager_panel(message: types.Message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = message.chat.id

    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã üó£Ô∏è")],
            [KeyboardButton(text="–î–∞—à–±–æ—Ä–¥ üíª")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ üë©‚Äçüíº")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup=keyboard)


@manager_router.message(Command("dashboard"))
@manager_router.message(F.text == "–î–∞—à–±–æ—Ä–¥ üíª")
async def dashboard_panel(message: types.Message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–∞—à–±–æ—Ä–¥–∞

    Args:
        callback_query (types.CallbackQuery): –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ üåü", callback_data="graph_distribution_of_ratings")],
        [InlineKeyboardButton(text="–î–∏–Ω–∞–º–∏–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ üìà", callback_data="graph_dynamics_of_satisfaction")],
        [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ üìä", callback_data="graph_number_of_reviews")],
        [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="custom_query")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:", reply_markup=keyboard)


@manager_router.callback_query(F.data == "graph_distribution_of_ratings")
async def graph_distribution_of_ratings(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    buffer = await graph.distribution_of_ratings()
    await callback_query.message.answer_photo(
        photo=BufferedInputFile(buffer.getvalue(), filename="graph.png"),
        caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ üåü"
    )
    await callback_query.answer()
    

@manager_router.callback_query(F.data == "graph_dynamics_of_satisfaction")
async def graph_dynamics_of_satisfaction(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    buffer = await graph.dynamics_of_satisfaction()
    await callback_query.message.answer_photo(
        photo=BufferedInputFile(buffer.getvalue(), filename="graph.png"),
        caption="–î–∏–Ω–∞–º–∏–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ üìà"
    )
    await callback_query.answer()


@manager_router.message(Command("unread_reviews"))
@manager_router.message(F.text == "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã üó£Ô∏è")
@manager_router.callback_query(F.data.startswith("unread_reviews_page_"))
async def unread_reviews(message_or_callback: types.Message | types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ callback - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    Args:
        message_or_callback (types.Message | types.CallbackQuery): —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å (ü©º)
    """
    user_id = message_or_callback.chat.id if isinstance(message_or_callback, types.Message) else message_or_callback.from_user.id

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if isinstance(message_or_callback, types.Message):
        page = 0
    else:
        page = int(message_or_callback.data.split("_")[3])
    
    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")

    text, keyboard = await get_reviews_page(page)
    if keyboard is None:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(text)
        else:
            await message_or_callback.message.edit_text(text)
    else:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            await message_or_callback.answer()  # ü©º


@manager_router.callback_query(F.data.startswith("review_"))
async def review(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –ø–æ –µ–≥–æ id

    Args:
        callback_query (types.CallbackQuery): –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    """
    call_type, review_id = callback_query.data.split("_")[0], int(callback_query.data.split("_")[1])
    review = await db.get_review(review_id)
    if not review:
        await callback_query.message.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback_query.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ {review_id}")
    
    message_text = (
        f"ID: {review.id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {review.user_name} (ID: {review.user_id})\n"
        f"–û—Ü–µ–Ω–∫–∞: {review.rating}\n"
        f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {review.tonality.value}\n"
        f"–¢–µ–∫—Å—Ç: {review.text}\n"
        f"–ü—Ä–æ—á–∏—Ç–∞–Ω: {'–î–∞' if review.readed else '–ù–µ—Ç'}\n"
        f"–û—Ç–≤–µ—á–µ–Ω: {'–î–∞' if review.answered else '–ù–µ—Ç'}"
    )
    
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úÖ", callback_data=f"readed_{review_id}")]
        if not review.readed else None,
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å üë•", callback_data=f"reply_{review.id}")]
        if not review.answered else None
    ]
    buttons = list(filter(None, buttons))

    if review.readed:
        message_text += f"\n–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å ID {review.readed_by}"

    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    
    if call_type == "review":
        await callback_query.message.answer(
            message_text,
            reply_markup = reply_markup
        )
    else:
        await callback_query.message.edit_text(
            message_text,
            reply_markup = reply_markup
        )


@manager_router.callback_query(F.data.startswith("readed_"))
async def mark_as_readed(callback_query: types.CallbackQuery):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –æ—Ç–∑—ã–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
    
    Args:
        callback_query (types.CallbackQuery): –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    """
    review_id = int(callback_query.data.split("_")[1])
    manager_id = callback_query.from_user.id
    await db.mark_as_readed(review_id, manager_id)
    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø–æ–º–µ—Ç–∏–ª –æ—Ç–∑—ã–≤ {review_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π")
    await callback_query.answer("–û—Ç–∑—ã–≤ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π")
    await review(callback_query)


async def get_reviews_page(page: int, reviews_per_page: int = 5) -> tuple[str, InlineKeyboardMarkup]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏

    Args:
        page (int): –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–∞–≤–æ–≤
        reviews_per_page (int, optional): –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.

    Returns:
        tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∞–º–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """    
    unread_reviews = await db.unreaded_reviews()
    total_reviews = len(unread_reviews)
    total_pages = (total_reviews + reviews_per_page - 1) // reviews_per_page
    start = page * reviews_per_page
    end = start + reviews_per_page
    reviews_to_display = unread_reviews[start:end]

    if not reviews_to_display:
        return "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.", None

    buttons = []
    
    # –æ—Ç–∑—ã–≤—ã
    for review in reviews_to_display:
        review_text = f"{review.rating}üåü - {review.tonality.value} - {review.text[:10]}..."
        buttons.append([InlineKeyboardButton(text=review_text, callback_data=f"review_{review.id}")])

    # –≤–∑–∞–¥-–≤–ø–µ—Ä—ë–¥
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"unread_reviews_page_{page - 1}"))
    if end < total_reviews:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"unread_reviews_page_{page + 1}"))
    if navigation_buttons:
        buttons.append(navigation_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"
    return text, keyboard


@manager_router.callback_query(F.data.startswith("reply_"))
async def start_manager_reply(callback: types.CallbackQuery, state: FSMContext):
    review_id = int(callback.data.split("_")[1])
    review = await db.get_review(review_id)
    
    if not review:
        await callback.message.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    if review.answered:
        await callback.message.answer("–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        await callback.answer()
        return
    
    await state.update_data(review_id=review_id, user_id=review.user_id, manager_id=callback.from_user.id)
    await state.set_state(ManagerForm.waiting_for_manager_reply)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()


@manager_router.message(ManagerForm.waiting_for_manager_reply)
async def end_manager_reply(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data["user_id"]
    review_id = data["review_id"]
    manager_id = data["manager_id"]
    
    try:
        await bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ñ–µ–π–Ω–∏ MuffinMate:\n\n{message.text}")
        await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        await db.mark_as_readed(review_id, manager_id)
        await db.mark_as_answered(review_id)
        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ—Ç–∑—ã–≤ {review_id}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await state.clear()


@manager_router.message(Command("manager_statistics"))
@manager_router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ üë©‚Äçüíº")
async def manager_profile(message: types.Message):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    start = datetime.now() - timedelta(days=30)
    end = datetime.now()
    stats = await db.get_manager_info(start, end)
    
    stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
    for manager, activity in stats:
        stats_text += f"üë§ {manager.name} (ID: {manager.user_id}) ‚Äî {activity} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n"

    await message.answer(stats_text)


@manager_router.callback_query(F.data == "custom_query")
async def custom_query(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(ManagerForm.waiting_for_custom_query)
    await callback_query.answer()
    

@manager_router.message(ManagerForm.waiting_for_custom_query)
async def process_custom_query(message: types.Message, state: FSMContext):
    query = message.text
    answer = await ai.custom_query(query)

    if answer == "graphics/graph.png":
        await message.answer_photo(photo=types.FSInputFile(answer))
    else: 
        await message.answer(answer)
        
    await state.clear()
